<!DOCTYPE html>
<html lang="en">
<head>
    <title>Automation Widget (Simple Status)</title>
</head>
<body id="body" spellcheck="false">
    <style>
        body {
            overflow: hidden;
            font-family: 'Open Sans', sans-serif;
            font-size: 15px;
            color: #4C4C4C;
        }

        @font-face {
            font-family: 'Open Sans';
            font-style: normal;
            font-weight: 400;
            src: local('Open Sans'), local('OpenSans'), url('../fonts/OpenSans400.woff') format('woff');
        }

        @font-face {
            font-family: 'Open Sans';
            font-style: normal;
            font-weight: 700;
            src: local('Open Sans'), local('OpenSans'), url('../fonts/OpenSans700.woff') format('woff');
        }

        .yellow {
            border-color: #c09853 !important;
            background-color: #c09853;
            color: #c09853;
        }

        .white {
            border-color: #ffffff !important;
            background-color: #ffffff;
            color: #ffffff;
        }

        .grey {
            border-color: #acacac !important;
            background-color: #acacac;
            color: #acacac;
        }

        .black {
            border-color: #4c4c4c !important;
            background-color: #4c4c4c;
            color: #4c4c4c;
        }

        .blue {
            border-color: #3a87ad !important;
            background-color: #3a87ad;
            color: #3a87ad;
        }

        .red {
            border-color: #b94a48 !important;
            background-color: #b94a48;
            color: #b94a48;
        }

        .green {
            border-color: #468847 !important;
            background-color: #468847;
            color: #468847;
        }
    </style>

    <span id="attrib0" data-type="channel" data-name="Source" data-default="" />
    <span id="TBtooltip" data-default="Display Binary Status" />
    <span id="ontop" data-default="true" />

    <div id="group">
        <svg id="widget" width="100" height="80" style="position: absolute; left: 0px; top: 0px; z-index:4">
            <style type="text/css">
                text {
                    font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
                    font-weight: normal;
                    font-style: normal;
                    font-size: 20px;
                    text-align: center;
                    pointer-events: none;
                }
            </style>

            <g id="scale">
                <circle id="circle" cx="50" cy="50" r="50" style="stroke:darkgreen; fill:green" />
            </g>
        </svg>
    </div>

    <script>
        "use strict";

        // Initialize widget framework API
        var fw;
        function widgetLoad(myName) {
            fw = new parent.widgetAPI(myName);                                  // widget framework object
        }

        // Widget specific startup actions for dashboard. Return "OK" if startup OK else return an error string
        function dashStart(mode) {
            return "OK";
        }

        // Widget specific startup actions when first created by dropping in design mode. Return "OK" if startup OK else return an error string
        function newWidget(mode) {
            return dashStart();
        }

        // Widget specific startup actions for toolbox. Return "OK" if startup OK else return an error string
        function toolStart(mode) {
            return "OK"
        }

        function startDesign() {                                // called when switching to design mode
            return true;
        }

        function menuUpdate() {                                 // called when widget option menu requires updating
            return true;
        }

        function help() {
            return "Put editing help details here with any HTML formatting"
        }

        function scale(scaleX, scaleY) {                        // manage scaling
            return true;
        }

        function keyPress(keyCode) {                            // handle key presses
            return true;
        }

        function feed(channel, scope, data) {                   // Called for incoming channel events
            switch (scope.toLowerCase()) {
                case "value":

                    break;
            }
            return true;
        }

        function ini(channel, scope, data) {                    // Called to set initial channel status
            switch (scope.toLowerCase()) {
                case "value":
                    feed(channel, scope, data);
                    break;
            }
        }

        // Insert other functions here

    </script>
</body>
</html>